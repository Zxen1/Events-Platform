name: Auto Deploy + Backups + Restore Tag

on:
  push:
    branches: [ "main" ]  # change if your default branch is different
  workflow_dispatch:

jobs:
  deploy:
    # Ignore the follow-up commit made by this workflow (github-actions[bot])
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed files in this push
        id: diffs
        run: |
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            # first push on a new branch etc â€” just diff the tree
            git diff --name-only $AFTER^ $AFTER > /tmp/changed.txt || true
          else
            git diff --name-only "$BEFORE" "$AFTER" > /tmp/changed.txt || true
          fi
          echo "changed=$(paste -sd, /tmp/changed.txt)" >> $GITHUB_OUTPUT

      - name: Make timestamped per-file backups under backups/
        if: steps.diffs.outputs.changed != ''
        env:
          TS: ${{ github.event.head_commit.timestamp }}
        run: |
          # Use Melbourne time formatting "YYYY-MM-DD HHMMSS"
          stamp="$(date -u +"%Y-%m-%d %H%M%S")"
          mkdir -p backups
          # Process each changed path; back up only regular existing files
          while IFS= read -r f; do
            [ -f "$f" ] || continue
            base="$(basename "$f")"
            cp -f "$f" "backups/${stamp} ${base}"
            echo "Backed up: backups/${stamp} ${base}"
          done < /tmp/changed.txt

          # Commit backups with [skip ci] to avoid a loop
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain backups/)" ]; then
            git add backups/
            git commit -m "chore(backup): timestamped copies of changed files [skip ci]"
            git push origin HEAD:${{ github.ref }}
          fi

      - name: Wait 5s quiet period before tagging
        run: |
          sleep 5
          # Ensure no new commits landed in the branch during the wait
          git fetch origin "${{ github.ref }}"
          if [ "$(git rev-parse HEAD)" != "$(git rev-parse FETCH_HEAD)" ]; then
            echo "New commits arrived during quiet wait; skip tagging this run."
            echo "skip_tagging=1" >> $GITHUB_ENV
          fi

      - name: Create restore tag on the current HEAD
        if: env.skip_tagging != '1'
        run: |
          tag="restore-$(date -u +%Y%m%d-%H%M%S)"
          git tag -a "$tag" -m "Full repo restore point after backups"
          git push origin "$tag"
          echo "Created restore tag: $tag"

      - name: Skip deploy if this push originated from cPanel
        id: origin_check
        run: |
          msg="$(git log -1 --pretty=%B)"
          if echo "$msg" | grep -qi '\[from:cpanel\]'; then
            echo "from_cpanel=1" >> $GITHUB_OUTPUT
          else
            echo "from_cpanel=0" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to cPanel via SSH + rsync
        if: steps.origin_check.outputs.from_cpanel == '0'
        env:
          SSH_KEY: ${{ secrets.CPANEL_SSH_KEY }}
          HOST:     ${{ secrets.CPANEL_HOST }}
          USER:     ${{ secrets.CPANEL_USER }}
          REMOTE:   ${{ secrets.CPANEL_PATH }}   # e.g. /home/USERNAME/public_html
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no $USER@$HOST 'echo Connected to cPanel host'

          # Build an rsync exclude list: respect .gitignore + typical hidden/sys folders
          cat .gitignore > /tmp/rsync-excludes || true
          {
            echo "/.git/"
            echo "/.github/"
            echo "/backups/"
            echo ".*"
          } >> /tmp/rsync-excludes

          # Push working tree to public_html (mirror of repo content, minus excludes)
          rsync -az --delete \
            --exclude-from=/tmp/rsync-excludes \
            ./ $USER@$HOST:$REMOTE/

