name: Auto Merge & Backup

on:
  push:
    branches:
      - main

permissions:
  contents: write   # allow pushing backups to the repo

jobs:
  merge-and-backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "codex-bot"
          git config user.email "codex-bot@example.com"

      - name: Backup changed files (flat list, skip renames)
        run: |
          set -e
          mkdir -p backups
          export TZ="Australia/Sydney"
          datetime=$(date +"%Y-%m-%dT%H%M%S.%3N")

          # Get commit message and make safe short description
          msg="${{ github.event.head_commit.message }}"
          desc="$(printf "%s" "$msg" | sed -n '2,$p' | sed -n '/./{p;q}')"
          if [ -z "$desc" ]; then
            desc="$(printf "%s" "$msg" | head -n 1)"
          fi
          safe_desc="$(printf "%s" "$desc" | tr ' ' '-' | tr -cd '[:alnum:]-')"
          safe_desc="${safe_desc:0:30}"  # Trim to 30 chars at creation only

          echo "üîç Finding changed files (excluding renames)..."
          # Get only modified or added files, skip renames (R) and deletions (D)
          CHANGED_FILES=$(git diff-tree --no-commit-id --diff-filter=AM -r ${{ github.sha }} --name-only)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No new or modified files in this push."
            exit 0
          fi

          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              base_name=$(basename "$file")
              ext="${base_name##*.}"
              name="${base_name%.*}"
              cp "$file" "backups/${name}-${datetime}-${safe_desc}.${ext}"
              echo "üì¶ Backed up: $file ‚Üí backups/${name}-${datetime}-${safe_desc}.${ext}"
            fi
          done

          echo "‚úÖ Backup completed. All files stored flat in backups/"

      - name: Commit backup
        run: |
          git add backups/
          if git diff --cached --quiet; then
            echo "No new backup created"
          else
            git commit -m "Backup changed files at $(date) for commit: ${{ github.sha }}"
            git push origin main
          fi
