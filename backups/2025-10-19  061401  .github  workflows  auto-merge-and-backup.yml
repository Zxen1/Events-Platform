name: Auto Merge & Backup

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'backups/**'

permissions:
  contents: write

jobs:
  merge-and-backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          # fetch 2 so HEAD~1 exists for diffs
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "codex-bot"
          git config user.email "codex-bot@example.com"

      # Marker retained from your original file; do not change semantics of other steps
      - name: Mark as merge commit for backup
        id: merge_check
        run: echo "merge_commit=true" >> $GITHUB_OUTPUT

      # -------------------------------
      # backup (file-level copy)
      # Only modified files, or files Added that overwrote an existing path in HEAD~1
      # Brand-new paths are intentionally skipped here (but still get tagged below).
      # -------------------------------
      - name: Backup changed files (timestamp-first, compact time)
        if: steps.merge_check.outputs.merge_commit == 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p backups
          export TZ="Australia/Sydney"
          date_part=$(date +"%Y-%m-%d")
          time_part=$(date +"%H%M%S")

          echo "🔍 Comparing HEAD~1 to HEAD for changes (filter: Modified + Added-overwrite)..."

          changed_list=()

          # Read status and path from name-status output
          while IFS=$'\t' read -r status path; do
            case "$status" in
              M)
                # Modified -> always back up
                changed_list+=("$path")
                ;;
              A)
                # Added: only treat as 'changed' if the path existed previously (overwrite/re-add)
                if git cat-file -e HEAD~1:"$path" 2>/dev/null; then
                  changed_list+=("$path")
                fi
                ;;
              *)
                # ignore D, R, C, etc. for file backups
                :
                ;;
            esac
          done < <(git diff --name-status HEAD~1 HEAD)

          if [ ${#changed_list[@]} -eq 0 ]; then
            echo "No modified or overwritten files in this push."
            exit 0
          fi

          echo "🌐 Two-way mirror safety: treating Codex/GitHub/CPanel-origin commits identically."

          # Copy each changed file into backups/ using flat naming (folders -> double spaces)
          for file in "${changed_list[@]}"; do
            if [ -f "$file" ]; then
              backup_name=$(echo "$file" | sed 's|/|  |g')
              cp -- "$file" "backups/${date_part}  ${time_part}  ${backup_name}"
              echo "📦 Backed up: $file → backups/${date_part}  ${time_part}  ${backup_name}"
            fi
          done

          echo "✅ Backup completed. All files stored flat in backups/"

      - name: Commit backup
        if: steps.merge_check.outputs.merge_commit == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git add backups/
          if git diff --cached --quiet; then
            echo "No new backup created"
          else
            git commit -m "Backup changed files at $(date) for commit: ${{ github.sha }}"
            git push origin main
          fi

      # -------------------------------
      # tag (restore tag = full website backup)
      # 5-second debounce/write-detect to avoid tag spam during batch edits/merges
      # -------------------------------
      - name: Wait for writes to settle (5-second debounce)
        run: |
          echo "🕒 Waiting 5 seconds for inactivity before creating restore tag..."
          sleep 5

      - name: Tag restore point
        if: steps.merge_check.outputs.merge_commit == 'true'
        shell: bash
        run: |
          set -euo pipefail
          export TZ="Australia/Sydney"
          tag_date=$(date +"%Y-%m-%d")
          tag_time=$(date +"%H%M%S")
          tag_name="restore-${tag_date}-${tag_time}"
          git tag -a "$tag_name" -m "Restore tag (full website backup) created automatically at ${tag_date} ${tag_time}"
          git push origin "$tag_name"
          echo "🏷 Created tag: $tag_name"
